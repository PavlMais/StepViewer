//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.ResultError ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.ResultError Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((this.ErrorField.Equals(value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultError", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public enum ResultError : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UsernameIsUsed = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserNotFound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PasswordIsIncorrect = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/Service.DTO")]
    [System.SerializableAttribute()]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] MembersIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OwnerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] MembersIds {
            get {
                return this.MembersIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.MembersIdsField, value) != true)) {
                    this.MembersIdsField = value;
                    this.RaisePropertyChanged("MembersIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Service.DTO")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActiveSession", Namespace="http://schemas.datacontract.org/2004/07/Service.DTO")]
    [System.SerializableAttribute()]
    public partial class ActiveSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MulticastAddresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MulticastAddres {
            get {
                return this.MulticastAddresField;
            }
            set {
                if ((object.ReferenceEquals(this.MulticastAddresField, value) != true)) {
                    this.MulticastAddresField = value;
                    this.RaisePropertyChanged("MulticastAddres");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService", CallbackContract=typeof(WCFClient.ServiceReference1.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        WCFClient.ServiceReference1.OperationResult Login(string username, System.Security.SecureString password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.OperationResult> LoginAsync(string username, System.Security.SecureString password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        WCFClient.ServiceReference1.OperationResult Register(string username, System.Security.SecureString password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.OperationResult> RegisterAsync(string username, System.Security.SecureString password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateGroup", ReplyAction="http://tempuri.org/IService/CreateGroupResponse")]
        void CreateGroup(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateGroup", ReplyAction="http://tempuri.org/IService/CreateGroupResponse")]
        System.Threading.Tasks.Task CreateGroupAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendGroupInvite", ReplyAction="http://tempuri.org/IService/SendGroupInviteResponse")]
        void SendGroupInvite(int userId, int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendGroupInvite", ReplyAction="http://tempuri.org/IService/SendGroupInviteResponse")]
        System.Threading.Tasks.Task SendGroupInviteAsync(int userId, int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGroups", ReplyAction="http://tempuri.org/IService/GetGroupsResponse")]
        WCFClient.ServiceReference1.Group[] GetGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGroups", ReplyAction="http://tempuri.org/IService/GetGroupsResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.Group[]> GetGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsers", ReplyAction="http://tempuri.org/IService/GetUsersResponse")]
        WCFClient.ServiceReference1.User[] GetUsers(int[] usersIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsers", ReplyAction="http://tempuri.org/IService/GetUsersResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.User[]> GetUsersAsync(int[] usersIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchUsers", ReplyAction="http://tempuri.org/IService/SearchUsersResponse")]
        WCFClient.ServiceReference1.User[] SearchUsers(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SearchUsers", ReplyAction="http://tempuri.org/IService/SearchUsersResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.User[]> SearchUsersAsync(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartSession", ReplyAction="http://tempuri.org/IService/StartSessionResponse")]
        ushort StartSession(string sessionName, int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/StartSession", ReplyAction="http://tempuri.org/IService/StartSessionResponse")]
        System.Threading.Tasks.Task<ushort> StartSessionAsync(string sessionName, int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/JoinSession", ReplyAction="http://tempuri.org/IService/JoinSessionResponse")]
        void JoinSession(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/JoinSession", ReplyAction="http://tempuri.org/IService/JoinSessionResponse")]
        System.Threading.Tasks.Task JoinSessionAsync(int sessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InviteReceived", ReplyAction="http://tempuri.org/IService/InviteReceivedResponse")]
        void InviteReceived(int fromUserId, int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SessionStarted", ReplyAction="http://tempuri.org/IService/SessionStartedResponse")]
        void SessionStarted(WCFClient.ServiceReference1.ActiveSession session);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : WCFClient.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<WCFClient.ServiceReference1.IService>, WCFClient.ServiceReference1.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.OperationResult Login(string username, System.Security.SecureString password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.OperationResult> LoginAsync(string username, System.Security.SecureString password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public WCFClient.ServiceReference1.OperationResult Register(string username, System.Security.SecureString password) {
            return base.Channel.Register(username, password);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.OperationResult> RegisterAsync(string username, System.Security.SecureString password) {
            return base.Channel.RegisterAsync(username, password);
        }
        
        public void CreateGroup(string name) {
            base.Channel.CreateGroup(name);
        }
        
        public System.Threading.Tasks.Task CreateGroupAsync(string name) {
            return base.Channel.CreateGroupAsync(name);
        }
        
        public void SendGroupInvite(int userId, int groupId) {
            base.Channel.SendGroupInvite(userId, groupId);
        }
        
        public System.Threading.Tasks.Task SendGroupInviteAsync(int userId, int groupId) {
            return base.Channel.SendGroupInviteAsync(userId, groupId);
        }
        
        public WCFClient.ServiceReference1.Group[] GetGroups() {
            return base.Channel.GetGroups();
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.Group[]> GetGroupsAsync() {
            return base.Channel.GetGroupsAsync();
        }
        
        public WCFClient.ServiceReference1.User[] GetUsers(int[] usersIds) {
            return base.Channel.GetUsers(usersIds);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.User[]> GetUsersAsync(int[] usersIds) {
            return base.Channel.GetUsersAsync(usersIds);
        }
        
        public WCFClient.ServiceReference1.User[] SearchUsers(string query) {
            return base.Channel.SearchUsers(query);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.User[]> SearchUsersAsync(string query) {
            return base.Channel.SearchUsersAsync(query);
        }
        
        public ushort StartSession(string sessionName, int groupId) {
            return base.Channel.StartSession(sessionName, groupId);
        }
        
        public System.Threading.Tasks.Task<ushort> StartSessionAsync(string sessionName, int groupId) {
            return base.Channel.StartSessionAsync(sessionName, groupId);
        }
        
        public void JoinSession(int sessionId) {
            base.Channel.JoinSession(sessionId);
        }
        
        public System.Threading.Tasks.Task JoinSessionAsync(int sessionId) {
            return base.Channel.JoinSessionAsync(sessionId);
        }
    }
}
